add_to_bookmarks:
  alias: Aggiungi ai preferiti
  sequence:
  - condition: template
    value_template: >
        {% set ns = namespace(found = 0) %}
        {% for title in state_attr("input_select.music","options") %}
          {% if title == states("input_text.music_string") %}
            {% set ns.found = 1 %}
          {% endif %}
        {% endfor %}
        {{ ns.found == 0 }}
  - service: input_select.set_options
    data_template:
      entity_id: input_select.music
      options: >
        {% set data = namespace(entities=[]) %}
        {% for title in state_attr("input_select.music","options") %}
          {% set data.entities = data.entities + [title] %}
        {% endfor %}
        {% set data.entities = data.entities + [states("input_text.music_string")] %}
        {{ data.entities }}
  - service: script.list_insert
    data_template:
      title: "{{ states('input_text.music_string') }}"

remove_from_bookmarks:
  alias: Rimuovi dai preferiti
  sequence:
  - service: script.list_delete
    data_template:
      title: "{{ states('input_select.music') }}"
  - service: input_select.set_options
    data_template:
      entity_id: input_select.music
      options: >
        {% set data = namespace(entities=[]) %}
        {% for title in state_attr("input_select.music","options") %}
          {% if title != states("input_select.music") %}
            {% set data.entities = data.entities + [title] %}
          {% endif %}
        {% endfor %}
        {{ data.entities }}

select_random_music:
  alias: Scegli musica random
  sequence:
  - service: input_select.select_option
    data_template:
      entity_id: input_select.music
      option: >
        {% set array = state_attr("input_select.music","options") %}
        {% set idx = (range(0, 1000)| random) %}
        {% set num = (array|length) %}
        {% set idx = idx | int - ((idx | int / num ) | int) * num %}
        {{ array[idx] }}

copy_bookmark:
  alias: Seleziona preferito
  sequence:
  - service: input_text.set_value
    data_template:
      entity_id: input_text.music_string
      value: "{{ states('input_select.music') }}"

play_multi_room:
  alias: Riproduci musica su multi room
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music_forced
      variables:
        media_player_id: media_player.multi_room
        multi_room_option: "multi room"

play_echo_dot:
  alias: Riproduci musica su echo dot
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music_forced
      variables:
        media_player_id: media_player.echo_dot_cucina
        multi_room_option: ""

play_echo_dot_black:
  alias: Riproduci musica su echo dot black
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music_forced
      variables:
        media_player_id: media_player.2o_echo_dot_di_salvatore
        multi_room_option: ""

play_music_forced:
  alias: Riproduci musica
  sequence:
  - service: script.turn_on
    data_template:
      entity_id: script.play_music
      variables:
        forced: 1
        shuffle: "{{ states('input_boolean.shuffle') }}"
        random: "{{ states('input_boolean.bookmark_random') }}"
        volume_level: "{{ states('input_number.media_volume') }}"
        media_content_type: "{{ states('input_select.media_content_type') }}"
        media_player_id: "{{ media_player_id }}"
        multi_room_option: "{{ multi_room_option }}"

play_music:
  alias: Riproduci musica
  sequence:
  - condition: template
    value_template: "{{ forced == 1 or states(media_player_id) != 'playing' }}"
  - service: media_player.volume_set
    data_template:
      entity_id: "{{ media_player_id }}"
      volume_level: "{{ volume_level|float / 100 }}"
  - service: media_player.shuffle_set
    data:
      entity_id: "{{ media_player_id }}"
      shuffle: "{{ shuffle }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ random == 'on' }}"
        sequence:
          - service: script.turn_on
            data:
              entity_id: script.select_random_music
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ multi_room_option != '' }}"
        sequence:
          - service: media_player.play_media
            data_template:
              entity_id: media_player.echo_dot_cucina
              media_content_type: "{{ media_content_type }}"
              media_content_id: >
                {% if random == 'on' %}
                  {% set title = states('input_select.music') %}
                {% else %}
                  {% set title = states('input_text.music_string') %}
                {% endif %}
                {{ title }} sul gruppo {{ multi_room_option }}
    default:
      - service: media_player.play_media
        data_template:
          entity_id: "{{ media_player_id }}"
          media_content_type: "{{ media_content_type }}"
          media_content_id: >
            {% if random == 'on' %}
              {% set title = states('input_select.music') %}
            {% else %}
              {% set title = states('input_text.music_string') %}
            {% endif %}
            {{ title }}
  - service: logbook.log
    data_template:
      name: script play_music
      message: >
        {% if random == 'on' %}
          {% set title = states('input_select.music') %}
        {% else %}
          {% set title = states('input_text.music_string') %}
        {% endif %}
        playing {{ title }}, volume: {{ volume_level }}, random: {{ random }}, shuffle: {{shuffle}}, media_content_type: {{media_content_type}}
  mode: single

text_to_speech_echo_dot:
  alias: text to speech su echo_dot
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.text_to_speech
      variables:
        media_player_id: media_player.echo_dot_cucina
        message: "{{ states('input_text.tts_string') }}"
        volume_level: "{{ states('input_number.media_volume') }}"

text_to_speech_echo_dot_black:
  alias: text to speech su echo_dot_black
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.text_to_speech
      variables:
        media_player_id: media_player.2o_echo_dot_di_salvatore
        message: "{{ states('input_text.tts_string') }}"
        volume_level: "{{ states('input_number.media_volume') }}"

text_to_speech_multi_room:
  alias: text to speech su multi room
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.text_to_speech
      variables:
        media_player_id: media_player.multi_room
        message: "{{ states('input_text.tts_string') }}"
        volume_level: "{{ states('input_number.media_volume') }}"

text_to_speech:
  alias: text to speech
  sequence:
  - service: media_player.volume_set
    data_template:
      entity_id: "{{ media_player_id }}"
      volume_level: "{{ volume_level|float / 100 }}"
  - service: notify.alexa_media
    data_template:
      message: "{{ message}}"
      title: "Title"
      data:
        type: announce
        method: spoken
      target: "{{ media_player_id }}"

