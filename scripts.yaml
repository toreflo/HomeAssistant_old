goodmorning:
  alias: Buongiorno
  sequence:
  - condition: state
    entity_id: 'device_tracker.iphone_di_salvatore'
    state: 'home'
  - service: script.turn_on
    data:
      entity_id: script.play_music
      variables:
        forced: 0
        media_player_id: media_player.multi_room
        multi_room_option: "multi room"
  - service: script.turn_on
    data:
      entity_id: script.light_up_zone
      variables:
        cover_entity: cover.zona_giorno
        light_entity: light.led_cucina_virtual
  mode: single

light_up_zone:
  alias: Illumina
  sequence:
  - service: logbook.log
    data:
      name: script ligh_up_zone
      message: "Sun is {{ states('sun.sun') }}, nice_weather is {{ states('binary_sensor.nice_weather') }} (weather.home = {{ states('weather.home') }})"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states('sun.sun') == 'above_horizon' and states('binary_sensor.nice_weather') == 'on' }}"
        sequence:
          - service: cover.set_cover_position
            data:
              entity_id: "{{ cover_entity }}"
              position: 100
    default:
      - service: light.turn_on
        data:
          entity_id: "{{ light_entity }}"

play_multi_room:
  alias: Riproduci musica su multi room
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music_forced
      variables:
        media_player_id: media_player.multi_room
        multi_room_option: "multi room"

play_echo_dot:
  alias: Riproduci musica su echo dot
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music_forced
      variables:
        media_player_id: media_player.echo_dot_cucina
        multi_room_option: ""

play_echo_dot_black:
  alias: Riproduci musica su echo dot black
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music_forced
      variables:
        media_player_id: media_player.2o_echo_dot_di_salvatore
        multi_room_option: ""

play_music_forced:
  alias: Riproduci musica
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.play_music
      variables:
        forced: 1
        media_player_id: "{{ media_player_id }}"
        multi_room_option: "{{ multi_room_option }}"

play_music:
  alias: Riproduci musica
  sequence:
  - condition: template
    value_template: "{{ forced == 1 or states(media_player_id) != 'playing' }}"
  - service: media_player.volume_set
    data:
      entity_id: "{{ media_player_id }}"
      volume_level: "{{ states('input_number.goodmorning_volume')|float / 100}}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ multi_room_option != '' }}"
        sequence:
          - service: media_player.play_media
            data:
              entity_id: media_player.echo_dot_cucina
              media_content_type: SPOTIFY #AMAZON_MUSIC
              media_content_id: "{{ states('input_text.goodmorning_music') }} su {{ multi_room_option }}"
    default:
      - service: media_player.play_media
        data:
          entity_id: "{{ media_player_id }}"
          media_content_type: SPOTIFY #AMAZON_MUSIC
          media_content_id: "{{ states('input_text.goodmorning_music') }}"
  mode: single


toggle_led_cucina:
  sequence:
  - service: switch.turn_on
    data: {}
    entity_id: switch.pulsante_led_cucina
  - delay:
      milliseconds: 250
  - service: switch.turn_off
    data: {}
    entity_id: switch.pulsante_led_cucina
  - service: logbook.log
    data:
      name: script toggle_led_cucina
      message: invocazione
  mode: single

turn_off_led_cucina:
  sequence:
  - condition: state
    entity_id: light.led_cucina_virtual
    state: 'on'
  - service: script.turn_on
    data:
      entity_id: script.toggle_led_cucina
turn_on_led_cucina:
  sequence:
  - condition: state
    entity_id: light.led_cucina_virtual
    state: 'off'
  - service: script.turn_on
    data:
      entity_id: script.toggle_led_cucina
  mode: single

change_brightness_led_cucina:
  sequence:
  - condition: state
    entity_id: light.led_cucina_virtual
    state: 'on'
  - condition: state
    entity_id: binary_sensor.led_cucina_brightness_ok
    state: 'off'
  - service: input_boolean.turn_on
    data: {}
    entity_id: input_boolean.dummy_switch
  - wait_template: "{{ is_state('binary_sensor.led_cucina_brightness_ok', 'on') }}"
    timeout: "00:00:30"
  - service: input_boolean.turn_off
    data: {}
    entity_id: input_boolean.dummy_switch
  mode: single

###################
#     Scenari     #
###################
sala_scene:
  sequence:
  - service: homeassistant.turn_off
    data:
      entity_id: group.luci_cucina
  - condition: state
    entity_id: group.luci_sala
    state: 'off'
  - service: light.turn_on
    data:
      entity_id: light.flos_aim
  mode: single

tv_scene:
  sequence:
  - service: light.turn_on
    data:
      entity_id: light.flos_ic_t2
  - delay: "00:00:02"
  - service: light.turn_off
    data:
      entity_id: light.flos_aim
  - service: light.turn_off
    data:
      entity_id: light.led_divano
  - service: light.turn_off
    data:
      entity_id: light.ingresso
  - service: homeassistant.turn_off
    data:
      entity_id: group.luci_cucina
  mode: single

cucina_scene:
  sequence:
  - service: homeassistant.turn_off
    data:
      entity_id: group.luci_sala
  - condition: state
    entity_id: group.luci_cucina
    state: 'off'
  - service: light.turn_on
    data:
      entity_id: light.led_cucina_virtual
  mode: single

exit_scene:
  sequence:
  - service: cover.close_cover
    data:
      entity_id: cover.tutte
  - service: homeassistant.turn_off
    data:
      entity_id: group.luci
  - service: media_player.turn_off
    data:
      entity_id: media_player.echo_dot_cucina
  - service: light.turn_on
    data:
      entity_id: light.ingresso
  - delay: "00:01:00"
  - service: homeassistant.turn_off
    data:
      entity_id: group.luci
  mode: single

welcome_scene:
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.light_up_zone
      variables:
        cover_entity: cover.zona_giorno
        light_entity: light.ingresso
